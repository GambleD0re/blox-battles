// /backend/src/modules/platforms/BasePlatformHandler.js
/**
 * Abstract Base Class for Platform Handlers.
 * This class defines the interface that all platform-specific linking
 * handlers must implement. It ensures a consistent contract for the
 * PlatformService to interact with.
 */
class BasePlatformHandler {
  constructor() {
    if (this.constructor === BasePlatformHandler) {
      throw new Error("Abstract classes can't be instantiated.");
    }
  }

  /**
   * Generates the necessary data for a user to begin the linking process.
   * For Roblox, this is a unique phrase. For others like Steam, it might
   * be an OAuth URL.
   * @param {object} user - The core CyberDome user object.
   * @returns {Promise<object>} An object containing the data needed for the user to act.
   *                            Example: { phrase: "unique-random-words" }
   */
  async generateLinkData(user) {
    throw new Error("Method 'generateLinkData()' must be implemented.");
  }

  /**
   * Verifies a user's identity on the external platform.
   * @param {object} verificationData - The data submitted by the user.
   * @param {string} verificationData.identity - The user's username or identifier on the platform.
   * @param {object} linkData - The data originally generated by generateLinkData.
   * @returns {Promise<object>} An object containing the verified platform-specific details.
   *                            Example: { game_username: "VerifiedUser", game_user_id: "12345678" }
   */
  async verifyIdentity(verificationData, linkData) {
    throw new Error("Method 'verifyIdentity()' must be implemented.");
  }
}

module.exports = BasePlatformHandler;
